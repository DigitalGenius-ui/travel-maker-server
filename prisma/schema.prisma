// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

model User {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  email       String         @unique
  password    String
  profile     Profile?
  role        Role           @default(User)
  bookings    Bookings[]
  moments     Moments[]
  reviews     Reviews[]
  comments    Comments[]
  refreshToke RefreshToken[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  @@map("refreshToken")
}

model Profile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String?  @default("")
  lastName   String?  @default("")
  userImg    String?  @default("")
  bio        String?  @default("")
  followers  String[]
  followings String[]
  gender     String?  @default("")
  birthDate  String?  @default("")
  facebook   String?  @default("")
  linkedIn   String?  @default("")
  instagram  String?  @default("")
  xMedia     String?  @default("")
  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId     String   @unique @db.ObjectId

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profile")
}

model Tours {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String?
  open_time         String?
  close_time        String?
  address           String?
  phone_number      String?
  number_of_tickets String?
  description       String?
  country           String?
  city              String?
  price             String?
  category          String?
  iframe_map        String?
  tourImages        String[]
  tourDuration      String?
  createAt          DateTime @default(now())
  updatedAt         DateTime @updatedAt

  reviews Reviews[]

  @@map("tours")
}

model Reviews {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  text         String
  rating       String
  reviewImages String[]

  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId String? @db.ObjectId

  tour    Tours?  @relation(fields: [toursId], references: [id])
  toursId String? @db.ObjectId

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Bookings {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  User   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId String? @db.ObjectId

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Moments {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  desc       String
  location   String
  postImages String[]

  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId String? @db.ObjectId

  comments Comments[]
  likes    String[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("moments")
}

model Comments {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String

  Moments  Moments? @relation(fields: [momentId], references: [id])
  momentId String?  @db.ObjectId

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment")
}
